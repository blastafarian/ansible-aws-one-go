---
- name: Provision infrastructure
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml
    - secrets.yml

  tasks:
    - name: Create a basic security group
      ec2_group:
        name: "{{ ec2_sg_name }}"
        description: "basic security group"
        region: "{{ ec2_region }}"
        vpc_id: "{{ ec2_vpc }}"
        aws_secret_key: "{{ aws_secret }}"
        aws_access_key: "{{ aws_key_id }}"
        purge_rules: true
        purge_rules_egress: true
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "0.0.0.0/0"
          - proto: tcp
            from_port: 3000
            to_port: 3000
            cidr_ip: "0.0.0.0/0"
        rules_egress:
          - proto: all
            cidr_ip: "0.0.0.0/0"

    - name: Create load balancer
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: present
        region: "{{ ec2_region }}"
        zones:
          - "{{ ec2_zone }}"
        aws_secret_key: "{{ aws_secret }}"
        aws_access_key: "{{ aws_key_id }}"
        listeners:
          - protocol: tcp
            load_balancer_port: 80
            instance_port: 3000
            proxy_protocol: true
        health_check:
          ping_protocol: http
          ping_port: 3000
          ping_path: '/_health'
          interval: 15
          healthy_threshold: 2
          unhealthy_threshold: 5
          response_timeout: 5
      register: elb_info

    - name: Spin up machine(s)
      ec2:
        aws_secret_key: "{{ aws_secret }}"
        aws_access_key: "{{ aws_key_id }}"
        key_name: "{{ aws_key_pair }}"
        group: "{{ ec2_sg_name }}"
        instance_type: "{{ ec2_instance_size }}"
        region: "{{ ec2_region }}"
        image: "{{ ec2_ami }}"
        vpc_subnet_id: "{{ ec2_subnet }}"
        assign_public_ip: yes
        wait: true
      register: ec2i

    - name: Create Ansible inventory group
      add_host:
        hostname: "{{ item.public_ip }}"
        groups: ec2hosts
      with_items: ec2i.instances

    - name: Wait for the machine to become available
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 500
        state: started
      with_items: "{{ ec2i.instances }}"

- name: Deploy application
  hosts: ec2hosts
  user: ec2-user
  become: yes
  gather_facts: true
  roles:
    - docker
    - redis
    - app

- name: Post tasks, publish app, show info
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yml
    - secrets.yml
  tasks:
    # - name: Taking a coffee break to give the instance time to pass health checks
    #   pause: minutes=1

    - name: Register instance(s) in the ELB
      ec2_elb:
        aws_secret_key: "{{ aws_secret }}"
        aws_access_key: "{{ aws_key_id }}"
        ec2_elbs:
          - "{{ elb_name }}"
        state: present
        region: "{{ ec2_region }}"
        instance_id: "{{ item }}"
        wait: yes
      with_items:
        - "{{ ec2i.instance_ids}}"

    - name: Print out the ELB DNS name
      debug: var=elb_info.elb.hosted_zone_name
